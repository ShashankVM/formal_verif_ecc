
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.38+54 (git sha1 f8d4d7128, clang 14.0.0-1ubuntu1.1 -fPIC -Os)


-- Executing script file `../model/design.ys' --

1. Executing Verilog-2005 frontend: rvecc_encode.sv
Parsing SystemVerilog input from `rvecc_encode.sv' to AST representation.
Storing AST representation for module `$abstract\rvecc_encode'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: rvecc_decode.sv
Parsing SystemVerilog input from `rvecc_decode.sv' to AST representation.
Storing AST representation for module `$abstract\rvecc_decode'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: channel_model.sv
Parsing SystemVerilog input from `channel_model.sv' to AST representation.
Storing AST representation for module `$abstract\channel_model'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: top.sv
Parsing SystemVerilog input from `top.sv' to AST representation.
Storing AST representation for module `$abstract\top'.
Successfully finished Verilog frontend.

5. Executing HIERARCHY pass (managing design hierarchy).

6. Executing AST frontend in derive mode using pre-parsed AST for module `\top'.
Generating RTLIL representation for module `\top'.

6.1. Analyzing design hierarchy..
Top module:  \top

6.2. Executing AST frontend in derive mode using pre-parsed AST for module `\rvecc_decode'.
Generating RTLIL representation for module `\rvecc_decode'.
Parameter 1 (\DATA_WIDTH) = 39

6.3. Executing AST frontend in derive mode using pre-parsed AST for module `\channel_model'.
Parameter 1 (\DATA_WIDTH) = 39
Generating RTLIL representation for module `$paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111'.

6.4. Executing AST frontend in derive mode using pre-parsed AST for module `\rvecc_encode'.
Generating RTLIL representation for module `\rvecc_encode'.

6.5. Analyzing design hierarchy..
Top module:  \top
Used module:     \rvecc_decode
Used module:     $paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111
Used module:     \rvecc_encode

6.6. Analyzing design hierarchy..
Top module:  \top
Used module:     \rvecc_decode
Used module:     $paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111
Used module:     \rvecc_encode
Removing unused module `$abstract\top'.
Removing unused module `$abstract\channel_model'.
Removing unused module `$abstract\rvecc_decode'.
Removing unused module `$abstract\rvecc_encode'.
Removed 4 unused modules.
Module top directly or indirectly contains formal properties -> setting "keep" attribute.

7. Executing PREP pass.

7.1. Executing HIERARCHY pass (managing design hierarchy).

7.1.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \rvecc_decode
Used module:     $paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111
Used module:     \rvecc_encode

7.1.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \rvecc_decode
Used module:     $paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111
Used module:     \rvecc_encode
Removed 0 unused modules.
Module top directly or indirectly contains formal properties -> setting "keep" attribute.

7.2. Executing PROC pass (convert processes to netlists).

7.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$channel_model.sv:0$176 in module $paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111.
Marked 1 switch rules as full_case in process $proc$top.sv:0$2 in module top.
Removed a total of 0 dead cases.

7.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 12 redundant assignments.
Promoted 16 assignments to connections.

7.2.4. Executing PROC_INIT pass (extract init attributes).

7.2.5. Executing PROC_ARST pass (detect async resets in processes).

7.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~2 debug messages>

7.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111.$proc$channel_model.sv:0$176'.
     1/4: $1\dout[38:0]
     2/4: $1$bitselwrite$pos$channel_model.sv:11$173[5:0]$181
     3/4: $1$bitselwrite$pos$channel_model.sv:14$175[5:0]$183
     4/4: $1$bitselwrite$pos$channel_model.sv:13$174[5:0]$182
Creating decoders for process `\top.$proc$top.sv:0$2'.
     1/6: \ASSERT_DOUBLE_ED_EN
     2/6: \ASSERT_NO_SINGLE_ECC_EN
     3/6: \ASSERT_DATA_NOT_RECOVERED_EN
     4/6: \ASSERT_NO_DOUBLE_ED_EN
     5/6: \ASSERT_SINGLE_ECC_EN
     6/6: \ASSERT_DATA_RECOVERED_EN

7.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111.\dout' from process `$paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111.$proc$channel_model.sv:0$176'.
No latch inferred for signal `$paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111.$bitselwrite$pos$channel_model.sv:11$173' from process `$paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111.$proc$channel_model.sv:0$176'.
No latch inferred for signal `$paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111.$bitselwrite$pos$channel_model.sv:13$174' from process `$paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111.$proc$channel_model.sv:0$176'.
No latch inferred for signal `$paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111.$bitselwrite$pos$channel_model.sv:14$175' from process `$paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111.$proc$channel_model.sv:0$176'.

7.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

7.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

7.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `$paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111.$proc$channel_model.sv:0$176'.
Removing empty process `$paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111.$proc$channel_model.sv:0$176'.
Found and cleaned up 1 empty switch in `\top.$proc$top.sv:0$2'.
Removing empty process `top.$proc$top.sv:0$2'.
Cleaned up 2 empty switches.

7.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module rvecc_encode.
Optimizing module $paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111.
<suppressed ~5 debug messages>
Optimizing module rvecc_decode.
<suppressed ~2 debug messages>
Optimizing module top.
<suppressed ~17 debug messages>

7.3. Executing FUTURE pass.

7.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module rvecc_encode.
Optimizing module $paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111.
Optimizing module rvecc_decode.
Optimizing module top.

7.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rvecc_encode..
Finding unused cells or wires in module $paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111..
Finding unused cells or wires in module \rvecc_decode..
Finding unused cells or wires in module \top..
Removed 5 unused cells and 94 unused wires.
<suppressed ~9 debug messages>

7.6. Executing CHECK pass (checking for obvious problems).
Checking module $paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111...
Checking module rvecc_decode...
Checking module rvecc_encode...
Checking module top...
Warning: Wire top.\decoder_en is used but has no driver.
Warning: Wire top.\error_pos2 [5] is used but has no driver.
Warning: Wire top.\error_pos2 [4] is used but has no driver.
Warning: Wire top.\error_pos2 [3] is used but has no driver.
Warning: Wire top.\error_pos2 [2] is used but has no driver.
Warning: Wire top.\error_pos2 [1] is used but has no driver.
Warning: Wire top.\error_pos2 [0] is used but has no driver.
Warning: Wire top.\sed_ded is used but has no driver.
Warning: Wire top.\error_pos1 [5] is used but has no driver.
Warning: Wire top.\error_pos1 [4] is used but has no driver.
Warning: Wire top.\error_pos1 [3] is used but has no driver.
Warning: Wire top.\error_pos1 [2] is used but has no driver.
Warning: Wire top.\error_pos1 [1] is used but has no driver.
Warning: Wire top.\error_pos1 [0] is used but has no driver.
Warning: Wire top.\din_encoder [31] is used but has no driver.
Warning: Wire top.\din_encoder [30] is used but has no driver.
Warning: Wire top.\din_encoder [29] is used but has no driver.
Warning: Wire top.\din_encoder [28] is used but has no driver.
Warning: Wire top.\din_encoder [27] is used but has no driver.
Warning: Wire top.\din_encoder [26] is used but has no driver.
Warning: Wire top.\din_encoder [25] is used but has no driver.
Warning: Wire top.\din_encoder [24] is used but has no driver.
Warning: Wire top.\din_encoder [23] is used but has no driver.
Warning: Wire top.\din_encoder [22] is used but has no driver.
Warning: Wire top.\din_encoder [21] is used but has no driver.
Warning: Wire top.\din_encoder [20] is used but has no driver.
Warning: Wire top.\din_encoder [19] is used but has no driver.
Warning: Wire top.\din_encoder [18] is used but has no driver.
Warning: Wire top.\din_encoder [17] is used but has no driver.
Warning: Wire top.\din_encoder [16] is used but has no driver.
Warning: Wire top.\din_encoder [15] is used but has no driver.
Warning: Wire top.\din_encoder [14] is used but has no driver.
Warning: Wire top.\din_encoder [13] is used but has no driver.
Warning: Wire top.\din_encoder [12] is used but has no driver.
Warning: Wire top.\din_encoder [11] is used but has no driver.
Warning: Wire top.\din_encoder [10] is used but has no driver.
Warning: Wire top.\din_encoder [9] is used but has no driver.
Warning: Wire top.\din_encoder [8] is used but has no driver.
Warning: Wire top.\din_encoder [7] is used but has no driver.
Warning: Wire top.\din_encoder [6] is used but has no driver.
Warning: Wire top.\din_encoder [5] is used but has no driver.
Warning: Wire top.\din_encoder [4] is used but has no driver.
Warning: Wire top.\din_encoder [3] is used but has no driver.
Warning: Wire top.\din_encoder [2] is used but has no driver.
Warning: Wire top.\din_encoder [1] is used but has no driver.
Warning: Wire top.\din_encoder [0] is used but has no driver.
Found and reported 46 problems.

7.7. Executing OPT pass (performing simple optimizations).

7.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111.
Optimizing module rvecc_decode.
Optimizing module rvecc_encode.
Optimizing module top.

7.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111'.
<suppressed ~33 debug messages>
Finding identical cells in module `\rvecc_decode'.
<suppressed ~6 debug messages>
Finding identical cells in module `\rvecc_encode'.
Finding identical cells in module `\top'.
Removed a total of 13 cells.

7.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvecc_decode..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvecc_encode..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

7.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111.
  Optimizing cells in module \rvecc_decode.
  Optimizing cells in module \rvecc_encode.
  Optimizing cells in module \top.
Performed a total of 0 changes.

7.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111'.
Finding identical cells in module `\rvecc_decode'.
Finding identical cells in module `\rvecc_encode'.
Finding identical cells in module `\top'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

7.7.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111..
Finding unused cells or wires in module \rvecc_decode..
Finding unused cells or wires in module \rvecc_encode..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 13 unused wires.
<suppressed ~2 debug messages>

7.7.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111.
Optimizing module rvecc_decode.
Optimizing module rvecc_encode.
Optimizing module top.

7.7.8. Rerunning OPT passes. (Maybe there is more to do..)

7.7.9. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvecc_decode..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvecc_encode..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

7.7.10. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111.
  Optimizing cells in module \rvecc_decode.
  Optimizing cells in module \rvecc_encode.
  Optimizing cells in module \top.
Performed a total of 0 changes.

7.7.11. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111'.
Finding identical cells in module `\rvecc_decode'.
Finding identical cells in module `\rvecc_encode'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

7.7.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111..
Finding unused cells or wires in module \rvecc_decode..
Finding unused cells or wires in module \rvecc_encode..
Finding unused cells or wires in module \top..

7.7.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111.
Optimizing module rvecc_decode.
Optimizing module rvecc_encode.
Optimizing module top.

7.7.14. Finished OPT passes. (There is nothing left to do.)

7.8. Executing WREDUCE pass (reducing word size of cells).
Converting cell $paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111.$neg$channel_model.sv:0$184 ($neg) from signed to unsigned.
Removed top 1 bits (of 7) from port A of cell $paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111.$neg$channel_model.sv:0$184 ($neg).
Converting cell $paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111.$neg$channel_model.sv:0$202 ($neg) from signed to unsigned.
Removed top 1 bits (of 7) from port A of cell $paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111.$neg$channel_model.sv:0$202 ($neg).
Removed top 5 bits (of 6) from port B of cell rvecc_decode.$eq$rvecc_decode.sv:49$134 ($eq).
Removed top 4 bits (of 6) from port B of cell rvecc_decode.$eq$rvecc_decode.sv:49$135 ($eq).
Removed top 4 bits (of 6) from port B of cell rvecc_decode.$eq$rvecc_decode.sv:49$136 ($eq).
Removed top 3 bits (of 6) from port B of cell rvecc_decode.$eq$rvecc_decode.sv:49$137 ($eq).
Removed top 3 bits (of 6) from port B of cell rvecc_decode.$eq$rvecc_decode.sv:49$138 ($eq).
Removed top 3 bits (of 6) from port B of cell rvecc_decode.$eq$rvecc_decode.sv:49$139 ($eq).
Removed top 3 bits (of 6) from port B of cell rvecc_decode.$eq$rvecc_decode.sv:49$140 ($eq).
Removed top 2 bits (of 6) from port B of cell rvecc_decode.$eq$rvecc_decode.sv:49$141 ($eq).
Removed top 2 bits (of 6) from port B of cell rvecc_decode.$eq$rvecc_decode.sv:49$142 ($eq).
Removed top 2 bits (of 6) from port B of cell rvecc_decode.$eq$rvecc_decode.sv:49$143 ($eq).
Removed top 2 bits (of 6) from port B of cell rvecc_decode.$eq$rvecc_decode.sv:49$144 ($eq).
Removed top 2 bits (of 6) from port B of cell rvecc_decode.$eq$rvecc_decode.sv:49$145 ($eq).
Removed top 2 bits (of 6) from port B of cell rvecc_decode.$eq$rvecc_decode.sv:49$146 ($eq).
Removed top 2 bits (of 6) from port B of cell rvecc_decode.$eq$rvecc_decode.sv:49$147 ($eq).
Removed top 2 bits (of 6) from port B of cell rvecc_decode.$eq$rvecc_decode.sv:49$148 ($eq).
Removed top 1 bits (of 6) from port B of cell rvecc_decode.$eq$rvecc_decode.sv:49$149 ($eq).
Removed top 1 bits (of 6) from port B of cell rvecc_decode.$eq$rvecc_decode.sv:49$150 ($eq).
Removed top 1 bits (of 6) from port B of cell rvecc_decode.$eq$rvecc_decode.sv:49$151 ($eq).
Removed top 1 bits (of 6) from port B of cell rvecc_decode.$eq$rvecc_decode.sv:49$152 ($eq).
Removed top 1 bits (of 6) from port B of cell rvecc_decode.$eq$rvecc_decode.sv:49$153 ($eq).
Removed top 1 bits (of 6) from port B of cell rvecc_decode.$eq$rvecc_decode.sv:49$154 ($eq).
Removed top 1 bits (of 6) from port B of cell rvecc_decode.$eq$rvecc_decode.sv:49$155 ($eq).
Removed top 1 bits (of 6) from port B of cell rvecc_decode.$eq$rvecc_decode.sv:49$156 ($eq).
Removed top 1 bits (of 6) from port B of cell rvecc_decode.$eq$rvecc_decode.sv:49$157 ($eq).
Removed top 1 bits (of 6) from port B of cell rvecc_decode.$eq$rvecc_decode.sv:49$158 ($eq).
Removed top 1 bits (of 6) from port B of cell rvecc_decode.$eq$rvecc_decode.sv:49$159 ($eq).
Removed top 1 bits (of 6) from port B of cell rvecc_decode.$eq$rvecc_decode.sv:49$160 ($eq).
Removed top 1 bits (of 6) from port B of cell rvecc_decode.$eq$rvecc_decode.sv:49$161 ($eq).
Removed top 1 bits (of 6) from port B of cell rvecc_decode.$eq$rvecc_decode.sv:49$162 ($eq).
Removed top 1 bits (of 6) from port B of cell rvecc_decode.$eq$rvecc_decode.sv:49$163 ($eq).
Removed top 1 bits (of 6) from port B of cell rvecc_decode.$eq$rvecc_decode.sv:49$164 ($eq).
Removed top 26 bits (of 32) from port B of cell top.$le$top.sv:18$3 ($le).
Removed top 31 bits (of 32) from port B of cell top.$ge$top.sv:18$4 ($ge).
Removed top 26 bits (of 32) from port B of cell top.$le$top.sv:19$6 ($le).
Removed top 31 bits (of 32) from port B of cell top.$ge$top.sv:19$7 ($ge).
Removed top 2 bits (of 6) from port B of cell top.$eq$top.sv:42$24 ($eq).
Removed top 1 bits (of 6) from port B of cell top.$eq$top.sv:43$25 ($eq).

7.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111..
Finding unused cells or wires in module \rvecc_decode..
Finding unused cells or wires in module \rvecc_encode..
Finding unused cells or wires in module \top..

7.10. Executing MEMORY_COLLECT pass (generating $mem cells).

7.11. Executing OPT pass (performing simple optimizations).

7.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111.
Optimizing module rvecc_decode.
Optimizing module rvecc_encode.
Optimizing module top.

7.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111'.
Finding identical cells in module `\rvecc_decode'.
Finding identical cells in module `\rvecc_encode'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

7.11.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111..
Finding unused cells or wires in module \rvecc_decode..
Finding unused cells or wires in module \rvecc_encode..
Finding unused cells or wires in module \top..

7.11.4. Finished fast OPT passes.

7.12. Printing statistics.

=== $paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111 ===

   Number of wires:                 21
   Number of wire bits:            499
   Number of public wires:           5
   Number of public wire bits:      91
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 17
     $and                            2
     $logic_not                      2
     $mux                            1
     $neg                            2
     $not                            2
     $or                             2
     $shift                          4
     $shiftx                         2

=== rvecc_decode ===

   Number of wires:                105
   Number of wire bits:            337
   Number of public wires:          12
   Number of public wire bits:     206
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                143
     $and                            4
     $eq                            40
     $mux                            1
     $not                            2
     $reduce_bool                    1
     $reduce_xor                     2
     $xor                           93

=== rvecc_encode ===

   Number of wires:                 83
   Number of wire bits:            125
   Number of public wires:           3
   Number of public wire bits:      45
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 87
     $reduce_xor                     2
     $xor                           85

=== top ===

   Number of wires:                 53
   Number of wire bits:            288
   Number of public wires:          33
   Number of public wire bits:     268
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 43
     $check                         18
     $eq                             4
     $ge                             2
     $le                             2
     $logic_and                      3
     $logic_not                      2
     $mux                            2
     $ne                             3
     $not                            3
     $paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111      1
     $reduce_bool                    1
     rvecc_decode                    1
     rvecc_encode                    1

=== design hierarchy ===

   top                               1
     $paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111      1
     rvecc_decode                    1
     rvecc_encode                    1

   Number of wires:                262
   Number of wire bits:           1249
   Number of public wires:          53
   Number of public wire bits:     610
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                287
     $and                            6
     $check                         18
     $eq                            44
     $ge                             2
     $le                             2
     $logic_and                      3
     $logic_not                      4
     $mux                            4
     $ne                             3
     $neg                            2
     $not                            7
     $or                             2
     $reduce_bool                    2
     $reduce_xor                     4
     $shift                          4
     $shiftx                         2
     $xor                          178

7.13. Executing CHECK pass (checking for obvious problems).
Checking module $paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111...
Checking module rvecc_decode...
Checking module rvecc_encode...
Checking module top...
Warning: Wire top.\decoder_en is used but has no driver.
Warning: Wire top.\error_pos2 [5] is used but has no driver.
Warning: Wire top.\error_pos2 [4] is used but has no driver.
Warning: Wire top.\error_pos2 [3] is used but has no driver.
Warning: Wire top.\error_pos2 [2] is used but has no driver.
Warning: Wire top.\error_pos2 [1] is used but has no driver.
Warning: Wire top.\error_pos2 [0] is used but has no driver.
Warning: Wire top.\sed_ded is used but has no driver.
Warning: Wire top.\error_pos1 [5] is used but has no driver.
Warning: Wire top.\error_pos1 [4] is used but has no driver.
Warning: Wire top.\error_pos1 [3] is used but has no driver.
Warning: Wire top.\error_pos1 [2] is used but has no driver.
Warning: Wire top.\error_pos1 [1] is used but has no driver.
Warning: Wire top.\error_pos1 [0] is used but has no driver.
Warning: Wire top.\din_encoder [31] is used but has no driver.
Warning: Wire top.\din_encoder [30] is used but has no driver.
Warning: Wire top.\din_encoder [29] is used but has no driver.
Warning: Wire top.\din_encoder [28] is used but has no driver.
Warning: Wire top.\din_encoder [27] is used but has no driver.
Warning: Wire top.\din_encoder [26] is used but has no driver.
Warning: Wire top.\din_encoder [25] is used but has no driver.
Warning: Wire top.\din_encoder [24] is used but has no driver.
Warning: Wire top.\din_encoder [23] is used but has no driver.
Warning: Wire top.\din_encoder [22] is used but has no driver.
Warning: Wire top.\din_encoder [21] is used but has no driver.
Warning: Wire top.\din_encoder [20] is used but has no driver.
Warning: Wire top.\din_encoder [19] is used but has no driver.
Warning: Wire top.\din_encoder [18] is used but has no driver.
Warning: Wire top.\din_encoder [17] is used but has no driver.
Warning: Wire top.\din_encoder [16] is used but has no driver.
Warning: Wire top.\din_encoder [15] is used but has no driver.
Warning: Wire top.\din_encoder [14] is used but has no driver.
Warning: Wire top.\din_encoder [13] is used but has no driver.
Warning: Wire top.\din_encoder [12] is used but has no driver.
Warning: Wire top.\din_encoder [11] is used but has no driver.
Warning: Wire top.\din_encoder [10] is used but has no driver.
Warning: Wire top.\din_encoder [9] is used but has no driver.
Warning: Wire top.\din_encoder [8] is used but has no driver.
Warning: Wire top.\din_encoder [7] is used but has no driver.
Warning: Wire top.\din_encoder [6] is used but has no driver.
Warning: Wire top.\din_encoder [5] is used but has no driver.
Warning: Wire top.\din_encoder [4] is used but has no driver.
Warning: Wire top.\din_encoder [3] is used but has no driver.
Warning: Wire top.\din_encoder [2] is used but has no driver.
Warning: Wire top.\din_encoder [1] is used but has no driver.
Warning: Wire top.\din_encoder [0] is used but has no driver.
Found and reported 46 problems.

8. Executing HIERARCHY pass (managing design hierarchy).

8.1. Analyzing design hierarchy..
Top module:  \top
Used module:     $paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111
Used module:     \rvecc_decode
Used module:     \rvecc_encode

8.2. Analyzing design hierarchy..
Top module:  \top
Used module:     $paramod\channel_model\DATA_WIDTH=s32'00000000000000000000000000100111
Used module:     \rvecc_decode
Used module:     \rvecc_encode
Removed 0 unused modules.
Module top directly or indirectly contains formal properties -> setting "keep" attribute.

9. Executing jny backend.

10. Executing RTLIL backend.
Output filename: ../model/design.il

Warnings: 46 unique messages, 92 total
End of script. Logfile hash: c4d5efb62a, CPU: user 0.11s system 0.01s, MEM: 13.74 MB peak
Yosys 0.38+54 (git sha1 f8d4d7128, clang 14.0.0-1ubuntu1.1 -fPIC -Os)
Time spent: 20% 6x opt_expr (0 sec), 18% 5x opt_clean (0 sec), ...
